{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.datasets import load_svmlight_file\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import auc\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "x,y = load_svmlight_file(\"/Users/limuyi/Desktop/lab2.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total data shape: (690, 14)\n",
      "train data shape: (552, 14)\n",
      "validation data shape: (138, 14)\n"
     ]
    }
   ],
   "source": [
    "# 划分训练集和验证集\n",
    "xtrain,xtest,ytrain,ytest = train_test_split(\n",
    "        x,y,test_size = 0.2, random_state = 0)\n",
    "print('total data shape:',x.shape)\n",
    "print('train data shape:', xtrain.shape)\n",
    "print('validation data shape:', xtest.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class classification(object):\n",
    "    def operate(model,x,y):\n",
    "        # 初始化学习率，权重，\n",
    "        rate = 0.01 \n",
    "        iters = 500\n",
    "        w = np.random.randn(xtrain.shape[1])\n",
    "        b = np.random.randn()\n",
    "        #print('weight matrix shape:', w.shape)\n",
    "        model.losses = []\n",
    "        for i in range(iters):\n",
    "            hinge = 1 - y * ( x*w+b )\n",
    "            hinge[hinge < 0] = 0\n",
    "            loss = np.sum(hinge) + rate * np.linalg.norm(w) / 2\n",
    "            model.losses.append(loss)       \n",
    "        # 更新参数\n",
    "        # wj += rate * ytrain * xtrain\n",
    "            for j in range(xtrain.shape[0]):\n",
    "                if ytrain[j] * (xtrain[j]*w + b) < 1:\n",
    "                    w += (rate * ytrain[j] * xtrain[j]).toarray()[0]\n",
    "                    b += rate * ytrain[j]                \n",
    "        return model\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\niwAoLy9n5cqVXHLJJcyePZuFCxcyYcIENm/ezK9+9Ss+8pGPcNttt/Va9ssvv5z58+fj9/u58MIL\nh+2/DE0BRkRERt3xxx/PN77xDf77v/+bNWvWkEwmefvtt5k2bRpmNuBmltNOO40f/vCH3HjjjSxf\nvpwZM2awYsUK3n777X4BZqB5DLbpZrhNOlOnTuWiiy7iiSee4N577yUQCHDUUUfxwAMPsGDBgky9\nRYsWMWXKFG688Ua+853vEI1GmTJlCnPmzGHx4sWZeueddx5XXHEFq1evzpwLRgFm/9lwSfRgZmaz\ngfr6+npmF9LGZhEpOA0NDdTV1aHPGykUw71m09OBOudcw0i3r31gREREpOAowIiIiEjBUYARERGR\ngqMAIyIiIgVHAUZEREQKjgKMiIiIFBwFGBERESk4CjAiIiJScBRgREREpOAowIiIiEjBUYARERGR\ngqMAIyIiBedHP/oRPp+PzZs3Z8rmzp3LaaedNuxjn376aXw+H7/73e9GtE8+n4/rrrtuROcpg1OA\nERGRgjPY1ad9vty+1oa7IvVgHnvsMa699tqc+1Rohlq+fKMAIyIi7wlr165lzZo1o9rGo48+Ougo\nSyQS4atf/eqotj/ahlq+fBMY6w6IiIiMhEBg9L/SnHODTguFQqPe/mgbavnyjUZgRERkVD344IP4\nfD6eeeaZftPuvPNOfD4fr776KgCvvPIKixcv5vDDD6ekpITJkyfz2c9+lt27dw/bzty5czn99NN7\nlW3dupUFCxZQVlZGbW0tV111FdFotN8X9e9//3suuOACpk+fTnFxMdOmTeOqq66iu7s7U2fx4sXc\ncccdgLe/i8/nw+/3Z6YPtA/MunXrOOuss6isrKS8vJx58+bxwgsv9Kpz11134fP5eO6557jqqquY\nOHEiZWVlnHfeeTQ1NQ273Dt27GDx4sVMnTqV4uJiDjnkEBYsWNBr/yDwNg+deuqplJWVUVFRwTnn\nnJNZ77ksX77JixEYM5sD/CtQB0wGFjjnftGnznXAPwFVwLPA551zb2ZNLwJuBi4EioA1wGXOuZ1Z\ndaqB7wHnAEngQeBK51zn6C2diMjB7eyzz6asrIz777+fOXPm9Jp2//33c8wxx3D00UcD3magt99+\nmyVLljBp0iT+8pe/cOedd/Lqq6/y/PPPD9lO3/1Puru7Of3003nnnXe48sormTx5Mvfccw+//e1v\n+9V94IEHiEQiXHbZZYwbN44XX3yR7373u2zdupX77rsPgKVLl7Jt2zYef/xxfvzjHw87WvHqq69y\n6qmnUllZyZe//GUCgQB33nknc+fO5Xe/+x0f/vCHe9W//PLLqamp4ZprrmHjxo3ccsstLFu2jFWr\nVg3Zznnnncf69eu54oormD59Ojt37mTt2rVs3ryZadOmAXDPPffwmc98hjPPPJMVK1bQ1dXFypUr\nmTNnDuvWrWPatGl7vXxjzjk35jfgTOA64BNAAji3z/Srgd14weMY4OfAW0Aoq85KYCPwUeBDwHPA\nM33m8xjQABwP/C3wOnDvEP2aDbj6+nonIjKa6uvr3Xv58+aiiy5ykyZNcslkMlO2fft25/f73Te/\n+c1MWXd3d7/Hrl692vl8Pvf73/8+U/ajH/3I+Xw+t2nTpkzZ3Llz3WmnnZa5f+uttzqfz+cefPDB\nTFkkEnFHHnmk8/l87umnnx6y3RtvvNH5/X63ZcuWTNmyZcucz+cbcBnNzF177bWZ+wsWLHDFxcVu\n48aNmbJ3333XVVRUuLlz5/ZaFjNz8+fP7zW/q666ygWDQdfW1jZge84519LS4szM3XTTTYPW6ejo\ncNXV1W7p0qW9ynfu3Omqqqrc5z73uZyWr6/hXrPp6cBsNwrZIS9GYJxzvwZ+DWAD78J9JXC9c+6R\nVJ1LgB3AAuB+M6sAlgALnXNPp+osBtab2QnOuRfNbBYwH6hzzq1L1bkc+JWZfdE5t310l1JEZOR0\nxbvY0LhhVNs4avxRhIPhEZnXhRdeyOrVq3nqqacyhzo/8MADOOe44IILMvWKiooy/0ejUTo6Ojjx\nxBNxztHQ0MApp5ySc5uPPfYYkydP5rzzzsuUFRcXc+mll3L11Vf3qpvdbldXF5FIhJNPPplkMsm6\ndes49NBD92p5k8kka9eu5ZOf/CTTp0/PlE+aNImLLrqI//3f/6Wjo4OysjLAGz269NJLe81jzpw5\n3HrrrWzatIljjjlmwHZKSkoIhUI89dRTLFmyhKqqqn511q5dS2trKwsXLuy1ScrMOPHEE3nyySf3\natnyRV4EmKGY2QxgEvBEusw512ZmLwAnA/fjjagE+tR5zcw2p+q8CJwENKfDS8rjeOnwRODhUV4U\nEZERs6FxA3XfrxvVNuovrWf25NkjMq8zzzyTiooK7rvvvkyAuf/++znuuOM44ogjMvWam5u55ppr\nuO+++9i5M7MHAGZGa2vrXrW5adOmXvNOmzlzZr+yLVu28LWvfY1f/vKXNDc371e7ALt27aKrq4v3\nv//9/abNmjWLZDLJli1bmDVrVqZ86tSpvepVV1cD9OpPX6FQiG9/+9t88YtfpLa2lpNOOolzzjmH\nSy65hNraWgDeeOMNnHMDniPHzKioqNjr5csHeR9g8MKLwxtxybYjNQ2gFog559qGqDMJ2Jk90TmX\nMLPdWXVERArCUeOPov7S+lFvY6SEQiEWLFjAz372M+644w7effddnn32WW688cZe9f7hH/6BP/zh\nD3zpS1/i2GOPpaysjGQyyfz580kmkyPWn2zJZJJ58+bR0tLCV77yFWbOnElpaSlbt27l05/+9Ki1\n29dgO8y6YfZFufLKKzn33HP5+c9/zpo1a/j617/ODTfcwJNPPsmxxx5LMpnEzLj33nszoSbbgTh6\nazQUZq8PsOXLl1NZWdmrbNGiRSxatGiMeiQiB7twMDxioyMHyoUXXsjdd9/NE088wV/+8heAXpuP\nWlpa+O1vf8v111/f63wqb775Zr955WL69OmZdrJt2NB709srr7zCG2+8wT333MM//uM/Zsoff/zx\nfo/N9UR1EyZMIBwO89prr/Wbtn79enw+X78Rl/0xY8YMli9fzvLly3nrrbc49thjuemmm7j77rs5\n/PDDcc4xYcKEfkdp9bWvJ+JbtWpVv52N92Xkam8UQoDZDhjeKEv2KEwtsC6rTsjMKvqMwtSmpqXr\nTMyesZn5gZqsOgO65ZZbmD27sD4oRETyzbx586iurmb16tWsX7+eE044odf+IekRiL4jHrfccss+\nfbF+/OMfZ+3atTz44IOcf/75gLd/y//8z//0qjdYu7feemu/dktLSwFoa2sbctOLz+fjYx/7GA8/\n/HCvo4F27NjBqlWrmDNnTmb/l/0RiUTw+Xy99uGZMWMG5eXlRKNRAObPn09FRQXf+ta3mDt3br8R\nl8bGRsaPH79Xy9fXQD/qGxoaqKsbvc2ceR9gnHNvm9l24AzgTwCpnXZPBG5PVasHelJ1fpaqMxOY\nBqSPu3seqDKzD2XtB3MGXjjqfVC+iIiMuEAgwHnnncfq1avp6uripptu6jW9vLycU089lRUrVhCL\nxZgyZQq/+c1v2Lhx4z4d0vvP//zPfO973+NTn/oUL730UuYw6vSXdNpRRx3F4Ycfzr/8y7/wzjvv\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111c5e908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = classification()\n",
    "\n",
    "# 可视化\n",
    "plt.figure()\n",
    "plt.title('rate = 0.01')\n",
    "plt.xlabel(\"Itering times\")\n",
    "plt.ylabel(\"Loss\")\n",
    "\n",
    "# 训练集\n",
    "modeltrain = model.operate(xtrain, ytrain)\n",
    "plt.plot(range(len(modeltrain.losses)), modeltrain.losses, label = 'train set')\n",
    "# 测试集\n",
    "modeltest = model.operate(xtest, ytest)\n",
    "plt.plot(range(len(modeltest.losses)), modeltest.losses, label = 'validation set')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
